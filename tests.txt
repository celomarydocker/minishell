-----------------------
export v="hh hhh"
> $V

------------------------------
touch abc
chmod 000 abc ; ./abc ; echo $?
-----------------------------------

#include <stdio.h>
#include <termio.h>
#include <unistd.h>
#include <termcap.h>
#include <stdlib.h>
# define KEY_UP 183
# define KEY_DOWN 184
# define KEY_LEFT  186
# define KEY_RIGHT 185
# define ENTER 10
# define KEY_REMOVE 127
# define KEY_TAB 9
# define CTRL_D 4

int             get_char()
{
        char    c;
        int     total;
        struct termios term, init;

        tcgetattr(0, &term);
        tcgetattr(0, &init);
        term.c_lflag &= ~(ICANON | ECHO);
        term.c_cc[VMIN] = 0;
        term.c_cc[VTIME] = 0;
        tcsetattr(0, TCSANOW, &term);
        total = 0;
        while (read(0, &c, 1) <= 0);
        total += c;
        while (read(0, &c, 1) > 0)
                total += c;
        tcsetattr(0, TCSANOW, &init);
        return (total);
}

int             ft_putchar(int c)
{
        return (write(1, &c, sizeof(int)));
}

int             main(void)
{
        int     d;
        char    *s;
        int     len;
        int     iter;

        len = 0;
        iter = 0;
        tgetent(NULL, getenv("TERM"));
        while (1)
        {
                d = get_char();
                if (d >= 32 && d <= 127)
                {
                        write(1, &d, sizeof(int));
                        len++;
                        iter++;
                }
                else if (d == KEY_UP)
                        write(1, "\nKEY_UP\n", 8);
                else if (d == KEY_LEFT)
                {
                        if (iter > 0)
                        {
                                s = tgetstr("le", NULL);
                                tputs(s, 1, ft_putchar);
                                iter--;
                        }
                }
                else if (d == KEY_RIGHT)
                {
                        if (iter < len)
                        {
                                s = tgetstr("nd", NULL);
                                tputs(s, 1, ft_putchar);
                                iter++;
                        }
                }
        }
        return (0);
}